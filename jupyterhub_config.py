# -*- coding: utf-8 -*-

"""Configuration file for jupyterhub."""

import os

c = get_config()

#------------------------------------------------------------------------------
# Application(SingletonConfigurable) configuration
#------------------------------------------------------------------------------

## This is an application.

## The date format used by logging formatters for %(asctime)s
#c.Application.log_datefmt = '%Y-%m-%d %H:%M:%S'

## The Logging format template
#c.Application.log_format = '[%(name)s]%(highlevel)s %(message)s'

## Set the log level by value or name.
#c.Application.log_level = 30

#------------------------------------------------------------------------------
# JupyterHub(Application) configuration
#------------------------------------------------------------------------------

## An Application for starting a Multi-User Jupyter Notebook server.

## Class for authenticating users.
#
#  This should be a class with the following form:
#
#  - constructor takes one kwarg: `config`, the IPython config object.
#
#  - is a tornado.gen.coroutine
#  - returns username on success, None on failure
#  - takes two arguments: (handler, data),
#    where `handler` is the calling web.RequestHandler,
#    and `data` is the POST form data from the login page.
c.JupyterHub.authenticator_class = 'jupyterhub.auth.PAMAuthenticator'

if os.environ.get("ONLINE"):
    ## Path to SSL certificate file for the public facing interface of the proxy
    #
    #  Use with ssl_key
    c.JupyterHub.ssl_cert = ''

    ## Path to SSL key file for the public facing interface of the proxy
    #
    #  Use with ssl_cert
    c.JupyterHub.ssl_key = ''
else:
    ## Confirm that JupyterHub should be run without SSL. This is **NOT RECOMMENDED**
    #  unless SSL termination is being handled by another layer.
    c.JupyterHub.confirm_no_ssl = True

## Number of days for a login cookie to be valid. Default is two weeks.
#c.JupyterHub.cookie_max_age_days = 14

## The cookie secret to use to encrypt cookies.
#
#  Loaded from the JPY_COOKIE_SECRET env variable by default.
#c.JupyterHub.cookie_secret = b''

## File in which to store the cookie secret.
#c.JupyterHub.cookie_secret_file = 'jupyterhub_cookie_secret'

## The location of jupyterhub data files (e.g. /usr/local/share/jupyter/hub)
#c.JupyterHub.data_files_path = '/home/huoty/miniconda2/envs/jupyterhub/share/jupyter/hub'

## Include any kwargs to pass to the database connection. See
#  sqlalchemy.create_engine for details.
#c.JupyterHub.db_kwargs = {}

## url for the database. e.g. `sqlite:///jupyterhub.sqlite`
c.JupyterHub.db_url = 'sqlite:///jupyterhub.sqlite'

## log all database transactions. This has A LOT of output
c.JupyterHub.debug_db = False

## show debug output in configurable-http-proxy
c.JupyterHub.debug_proxy = False

## Send JupyterHub's logs to this file.
#
#  This will *only* include the logs of the Hub itself, not the logs of the proxy
#  or any single-user servers.
#c.JupyterHub.extra_log_file = ''

## Extra log handlers to set on JupyterHub logger
#c.JupyterHub.extra_log_handlers = []

## The ip for this process
#c.JupyterHub.hub_ip = '127.0.0.1'
#c.JupyterHub.hub_ip = '0.0.0.0'
c.JupyterHub.hub_ip = '192.168.1.176'

## The port for this process
c.JupyterHub.hub_port = 8081

## The prefix for the hub server. Must not be '/'
#c.JupyterHub.hub_prefix = '/hub/'

## The public facing ip of the whole application (the proxy)
c.JupyterHub.ip = '127.0.0.1'

## Supply extra arguments that will be passed to Jinja environment.
#c.JupyterHub.jinja_environment_options = {}

## Interval (in seconds) at which to update last-activity timestamps.
#c.JupyterHub.last_activity_interval = 300

## Specify path to a logo image to override the Jupyter logo in the banner.
#c.JupyterHub.logo_file = ''

## File to write PID Useful for daemonizing jupyterhub.
#c.JupyterHub.pid_file = ''

## The public facing port of the proxy
c.JupyterHub.port = 8000

## The ip for the proxy API handlers
c.JupyterHub.proxy_api_ip = '127.0.0.1'

## The port for the proxy API handlers
#c.JupyterHub.proxy_api_port = 0

## The Proxy Auth token.
#
#  Loaded from the CONFIGPROXY_AUTH_TOKEN env variable by default.
#  a random token generated by jupyterhub.utils.new_token()
c.JupyterHub.proxy_auth_token = 'ff997bbce5575e6ab0748966fbd03211d21f1455'

## Interval (in seconds) at which to check if the proxy is running.
c.JupyterHub.proxy_check_interval = 30

## The command to start the http proxy.
#
#  Only override if configurable-http-proxy is not on your PATH
#c.JupyterHub.proxy_cmd = ['configurable-http-proxy']

## Purge and reset the database.
c.JupyterHub.reset_db = False

## The class to use for spawning single-user servers.
#
#  Should be a subclass of Spawner.
c.JupyterHub.spawner_class = 'jupyterhub.spawner.LocalProcessSpawner'

#------------------------------------------------------------------------------
# LocalAuthenticator(Authenticator) configuration
#------------------------------------------------------------------------------

## If a user is added that doesn't exist on the system, should I try to create
#  the system user?
c.LocalAuthenticator.create_system_users = True

## set of usernames of admin users
#
#  If unspecified, only the user that launches the server will be admin.
#c.Authenticator.admin_users = set()

## Username whitelist.
#
#  Use this to restrict which users can login. If empty, allow any user to
#  attempt login.
#c.Authenticator.whitelist = set()

## Regular expression pattern for validating usernames.
#
#  If not defined: allow any username.
#c.Authenticator.username_pattern = ''

#------------------------------------------------------------------------------
# Spawner(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## Base class for spawning single-user notebook servers.
#
#  Subclass this, and override the following methods:
#
#  - load_state - get_state - start - stop - poll

## Extra arguments to be passed to the single-user server
#c.Spawner.args = []

## The command used for starting notebooks.
#c.Spawner.cmd = ['jupyterhub-singleuser']

## Enable debug-logging of the single-user server
c.Spawner.debug = True

## Whitelist of environment variables for the subprocess to inherit
c.Spawner.env_keep = ['PATH', 'PYTHONPATH', 'PYTHONIOENCODING', 'CONDA_ROOT', 'CONDA_DEFAULT_ENV', 'VIRTUAL_ENV', 'LANG', 'LC_CTYPE', 'LC_ALL']

# spawn with Docker
c.JupyterHub.spawner_class = 'dockerspawner.SystemUserSpawner'

# container image
c.SystemUserSpawner.container_image = 'huoty/jupyterhub-systemuser'

# The docker instances need access to the Hub, so the default loopback port doesn't work:
from jupyter_client.localinterfaces import public_ips
print(public_ips())
c.SystemUserSpawner.container_ip = public_ips()[0]

# read only volumes
c.DockerSpawner.read_only_volumes = {
    '/dev/shm': '/dev/shm',
    '/etc/hosts': '/etc/hosts',
}
